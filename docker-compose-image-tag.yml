#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# -----------------------------------------------------------------------
# We don't support docker compose for production environments.
# If you choose to use this type of deployment make sure to
# create you own docker environment file (docker/.env) with your own
# unique random secure passwords and SECRET_KEY.
# -----------------------------------------------------------------------
x-rama-image: &rama-image itsjpthakur.docker.scarf.sh/rama:${TAG:-latest-dev}
x-rama-volumes:
  &rama-volumes # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - rama_home:/app/rama_home

services:
  redis:
    image: redis:7
    container_name: rama_cache
    restart: unless-stopped
    volumes:
      - redis:/data

  db:
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    image: postgres:15
    container_name: rama_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  rama:
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    image: *rama-image
    container_name: rama_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    depends_on:
      rama-init:
        condition: service_completed_successfully
    volumes: *rama-volumes
    environment:
      RAMA_LOG_LEVEL: "${RAMA_LOG_LEVEL:-info}"

  rama-init:
    image: *rama-image
    container_name: rama_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    user: "root"
    volumes: *rama-volumes
    healthcheck:
      disable: true
    environment:
      RAMA_LOAD_EXAMPLES: "${RAMA_LOAD_EXAMPLES:-no}"
      RAMA_LOG_LEVEL: "${RAMA_LOG_LEVEL:-info}"

  rama-worker:
    image: *rama-image
    container_name: rama_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    restart: unless-stopped
    depends_on:
      rama-init:
        condition: service_completed_successfully
    user: "root"
    volumes: *rama-volumes
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A rama.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    environment:
      RAMA_LOG_LEVEL: "${RAMA_LOG_LEVEL:-info}"

  rama-worker-beat:
    image: *rama-image
    container_name: rama_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    restart: unless-stopped
    depends_on:
      rama-init:
        condition: service_completed_successfully
    user: "root"
    volumes: *rama-volumes
    healthcheck:
      disable: true
    environment:
      RAMA_LOG_LEVEL: "${RAMA_LOG_LEVEL:-info}"

volumes:
  rama_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
