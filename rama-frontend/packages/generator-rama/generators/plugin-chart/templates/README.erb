# <%= packageName %>

This is the <%= description %> Rama Chart Plugin.

### Usage

To build the plugin, run the following commands:

```
npm ci
npm run build
```

Alternatively, to run the plugin in development mode (=rebuilding whenever changes are made), start the dev server with the following command:

```
npm run dev
```

To add the package to Rama, go to the `rama-frontend` subdirectory in your Rama source folder (assuming both the `<%= packageName %>` plugin and `rama` repos are in the same root directory) and run
```
npm i -S ../../<%= packageName %>
```

If your Rama plugin exists in the `rama-frontend` directory and you wish to resolve TypeScript errors about `@rama-ui/core` not being resolved correctly, add the following to your `tsconfig.json` file:

```
"references": [
  {
    "path": "../../packages/rama-ui-chart-controls"
  },
  {
    "path": "../../packages/rama-ui-core"
  }
]
```

You may also wish to add the following to the `include` array in `tsconfig.json` to make Rama types available to your plugin:

```
"../../types/**/*"
```

Finally, if you wish to ensure your plugin `tsconfig.json` is aligned with the root Rama project, you may add the following to your `tsconfig.json` file:

```
"extends": "../../tsconfig.json",
```

After this edit the `rama-frontend/src/visualizations/presets/MainPreset.js` and make the following changes:

```js
import { <%= packageLabel %> } from '<%= packageName %>';
```

to import the plugin and later add the following to the array that's passed to the `plugins` property:
```js
new <%= packageLabel %>().configure({ key: '<%= packageName %>' }),
```

After that the plugin should show up when you run Rama, e.g. the development server:

```
npm run dev-server
```
